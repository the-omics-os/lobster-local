[tool:pytest]
# Pytest Configuration for Lobster AI Testing Framework
# =====================================================

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Test
python_functions = test_*

# Minimum version requirement
minversion = 7.0

# Default command line options
addopts = 
    # Output formatting
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    
    # Coverage reporting
    --cov=lobster
    --cov-branch
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    
    # Performance and timeout
    --durations=10
    --timeout=300
    
    # Warnings
    --disable-warnings
    -p no:warnings
    
    # Fail fast options (commented out by default)
    # --maxfail=5
    # -x
    
    # Parallel execution (uncomment to enable)
    # -n auto
    # --dist=loadscope

# Test markers for categorization
markers =
    # Test categories
    unit: Unit tests for individual components
    integration: Integration tests across multiple components  
    system: End-to-end system tests
    performance: Performance and benchmark tests
    
    # Test characteristics
    slow: Tests that take longer than 30 seconds
    fast: Tests that should complete under 5 seconds
    external: Tests requiring external services or network access
    gpu: Tests requiring GPU acceleration
    memory_intensive: Tests requiring significant memory (>1GB)
    
    # Bioinformatics specific
    bio: Bioinformatics algorithm tests
    geo: GEO database related tests
    singlecell: Single-cell analysis tests
    bulk_rna: Bulk RNA-seq analysis tests
    proteomics: Proteomics analysis tests
    multiomics: Multi-omics integration tests
    
    # Agent system
    agents: Agent system tests
    workflows: Multi-agent workflow tests
    client: Client interface tests
    
    # Data management
    data_manager: Data manager tests
    adapters: Data adapter tests
    backends: Storage backend tests
    schemas: Data schema validation tests
    
    # Service layer
    services: Service layer tests
    tools: Analysis tool tests
    visualization: Visualization tests
    quality_control: Quality control tests
    
    # Infrastructure
    config: Configuration tests
    security: Security related tests
    error_handling: Error handling and recovery tests
    workspace: Workspace management tests
    
    # Test environment
    mock_data: Tests using synthetic data
    real_data: Tests using real biological datasets
    small_data: Tests with small datasets (<10MB)
    large_data: Tests with large datasets (>100MB)
    
    # CI/CD markers
    ci: Tests suitable for CI environment
    nightly: Tests for nightly builds
    release: Tests required for release validation
    
    # Skip conditions
    skip_windows: Skip on Windows systems
    skip_macos: Skip on macOS systems  
    skip_linux: Skip on Linux systems
    skip_ci: Skip in CI environments
    skip_local: Skip in local development

# Test timeout settings
timeout = 300
timeout_method = thread

# Coverage configuration
# (Note: main coverage config should be in pyproject.toml, this is backup)
[coverage:run]
source = lobster
branch = true
omit = 
    tests/*
    */__pycache__/*
    */migrations/*
    */venv/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
precision = 2
fail_under = 80

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Logging configuration for tests
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/test.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    # AnnData warnings
    ignore:.*AnnData.*:FutureWarning
    ignore:.*scanpy.*:FutureWarning
    # NumPy warnings
    ignore:.*numpy.*:RuntimeWarning
    # Pandas warnings  
    ignore:.*pandas.*:FutureWarning
    # Matplotlib warnings
    ignore:.*matplotlib.*:UserWarning
    
# Error on specific warnings that indicate real problems
    error::lobster.*:UserWarning

# Test collection configuration
collect_ignore = ["setup.py","build/","dist/", ".tox/",".eggs/","venv/",".venv/","env/",".env/"]

# Ignore files with these patterns
collect_ignore_glob = ["**/.*","**/__pycache__/**","**/node_modules/**","**/.DS_Store"]

# Custom collection rules
norecursedirs = 
    .git
    .tox  
    .eggs
    *.egg
    build
    dist
    .venv
    venv
    .env
    env
    __pycache__
    .cache
    .pytest_cache

# JUnit XML output for CI
junit_suite_name = lobster_test_suite
junit_logging = system-out
junit_log_passing_tests = true
junit_duration_report = total

# Console output options
console_output_style = progress
verbosity_assertions = 1

# Cache configuration
cache_dir = .pytest_cache

# Temporary directory for test files
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS
doctest_ignore_import_errors = true

# Asyncio configuration (if needed)
asyncio_mode = auto

# Plugin configuration
# Benchmark plugin
benchmark_only = false
benchmark_sort = mean
benchmark_group_by = group
benchmark_warmup = true
benchmark_disable_gc = false
benchmark_skip = false

# XDist plugin for parallel execution
dist = loadscope
tx = popen//python=python3.12

# Mock configuration helpers
mock_use_standalone_module = true

# Custom test session configuration
testmon_off = true  # Disable testmon by default (enable manually if needed)